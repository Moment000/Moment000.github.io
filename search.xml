<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c语言</title>
      <link href="/2021/11/19/C%E8%AF%AD%E8%A8%80/c%E8%AF%AD%E8%A8%80/"/>
      <url>/2021/11/19/C%E8%AF%AD%E8%A8%80/c%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2021/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h3 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h3><h3 id="构造长度为n的顺序表"><a href="#构造长度为n的顺序表" class="headerlink" title="构造长度为n的顺序表"></a>构造长度为n的顺序表</h3><h3 id="判断顺序表是否为空"><a href="#判断顺序表是否为空" class="headerlink" title="判断顺序表是否为空"></a>判断顺序表是否为空</h3><h3 id="顺序表求长度"><a href="#顺序表求长度" class="headerlink" title="顺序表求长度"></a>顺序表求长度</h3><h3 id="安值查找"><a href="#安值查找" class="headerlink" title="安值查找"></a>安值查找</h3><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h3 id="按位置查找的算法-i"><a href="#按位置查找的算法-i" class="headerlink" title="按位置查找的算法(i)"></a>按位置查找的算法(i)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//成功1 失败0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(Seqlist *L,<span class="keyword">int</span> i,datatype i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="单链表的实现-–-删除"><a href="#单链表的实现-–-删除" class="headerlink" title="单链表的实现 – 删除"></a>单链表的实现 – 删除</h2><p>算法：Delete</p><blockquote><p>q=p-&gt;next;<br>p-&gt;next=q-&gt;next; </p></blockquote><p>算法描述</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_linklist</span><span class="params">(Node *first,<span class="keyword">int</span> i,datatype *ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p = first,*q;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next &amp;&amp; count&lt;i<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到了i-1的位置</span></span><br><span class="line">    <span class="keyword">if</span>(count==i<span class="number">-1</span> &amp;&amp; p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q=p-&gt;next;</span><br><span class="line">        *ptr=q-&gt;data;</span><br><span class="line">        p-&gt;next=q-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：<br>  好：O(1)<br>  坏：O(n)<br>  平均：O(n)</p></blockquote><h2 id="构造一个长度为n的单链表"><a href="#构造一个长度为n的单链表" class="headerlink" title="构造一个长度为n的单链表"></a>构造一个长度为n的单链表</h2><blockquote><p>s-&gt;next=p-&gt;next;<br>p-&gt;next=s;</p></blockquote><h3 id="头插法构造单链表（反序链表）"><a href="#头插法构造单链表（反序链表）" class="headerlink" title="头插法构造单链表（反序链表）"></a>头插法构造单链表（反序链表）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">create_linklist</span><span class="params">(<span class="keyword">int</span> n,datatype r[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *first,*s;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    first=(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    first-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))</span><br><span class="line">        s-&gt;data=r[i];</span><br><span class="line">        s-&gt;next=first-&gt;next;</span><br><span class="line">        first-&gt;next=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：<br>  T(n)=O(n)</p></blockquote><h3 id="尾插法构造单链表"><a href="#尾插法构造单链表" class="headerlink" title="尾插法构造单链表"></a>尾插法构造单链表</h3><p>时空转换法：<br>空间&lt;-&gt;时间<br>也就是用空间代替时间</p><blockquote><p>rear-&gt;next=s;</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">create_linklist</span><span class="params">(<span class="keyword">int</span> n,datatype r[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *first,*rear,*s;<span class="comment">//*rear尾指针</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    first=(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    rear=first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=(Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        s-&gt;data=r[<span class="number">0</span>];</span><br><span class="line">        rear-&gt;next=s;</span><br><span class="line">        rear=s;</span><br><span class="line">    &#125;</span><br><span class="line">    rear-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度<br>  T(n)=O(n)</p></blockquote><h3 id="补充算法-–单链表的逆置算法"><a href="#补充算法-–单链表的逆置算法" class="headerlink" title="补充算法 –单链表的逆置算法"></a>补充算法 –单链表的逆置算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(Node *first)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* p,*r;</span><br><span class="line">    p=first-&gt;next;</span><br><span class="line">    first-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        r=p-&gt;next;</span><br><span class="line">        p-&gt;next=first-&gt;next;</span><br><span class="line">        first-&gt;next=p;</span><br><span class="line">        p=r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法2.</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     Node *p,*pre,*r;</span><br><span class="line">    p-&gt;first-&gt;next;</span><br><span class="line">    pre=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        r=p-&gt;next;</span><br><span class="line">        p-&gt;next=pre;</span><br><span class="line">        pre=p;</span><br><span class="line">        p=r;</span><br><span class="line">    &#125;</span><br><span class="line">    first-&gt;next=pre;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="按值查找算法"><a href="#按值查找算法" class="headerlink" title="按值查找算法"></a>按值查找算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">locate_linklist</span><span class="params">(Node *first,datatype x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p=first;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data==x)&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度<br>  好O(1)<br>  坏O(n)</p></blockquote><pre><code>    顺序表          单链表</code></pre><p>空间    1.静态分配      动态分配<br>        2.存储密度=1    存储密度&lt;1</p><p>按位置查找(i)   O(1)            O(n)<br>                随机存取结构    顺序存取结构<br>安值查找(x)     好O(1)<br>                坏O(n)<br>                平均 <strong>比较(n+1)/2</strong> O(n)</p><p>插入    O(n)元素移动    O(n)指针移动(效率更高)<br>        <strong>平均移动n/2</strong><br>删除    O(n)元素移动    O(n)指针移动(效率更高)<br>        <strong>平均移动(n-1)/2</strong></p><blockquote><p>存储密度：一个数据元素的大小/一个节点的大小<br>  数据元素的大小</p></blockquote><h2 id="双链表的操作–插入"><a href="#双链表的操作–插入" class="headerlink" title="双链表的操作–插入"></a>双链表的操作–插入</h2>]]></content>
      
      
      <categories>
          
          <category> 顺序表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
